<?php

namespace Mafia;

use VK\CallbackApi\LongPoll\VKCallbackApiLongPollExecutor;
use VK\CallbackApi\VKCallbackApiHandler;
use VK\Client\Enums\VKLanguage;
use VK\Client\VKApiClient;

class MainHandler extends VKCallbackApiHandler
{
    /**
     * @var VKApiClient
     */
    protected static $vk_api;

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ —Å–ª—É—à–∞–µ—Ç long polling
     * @throws \VK\Exceptions\VKApiException
     * @throws \VK\Exceptions\VKClientException
     * @throws \VK\CallbackApi\LongPoll\Exceptions\VKLongPollServerTsException
     */
    public static function run(): void
    {
        $vk = self::getVK();
        $handler = new MainHandler();
        $executor = new VKCallbackApiLongPollExecutor($vk, VK_TOKEN, GROUP_ID, $handler, 10);

        while(true) {
            $executor->listen();
            $handler->handleGameMessage(['ping' => true], GROUP_ID);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á–µ–º –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
     * @param int $gid
     * @param string|null $secret
     * @param array $object
     * @throws \Exception
     */
    public function messageNew(int $gid = -1, string $secret = null, array $object = []): void
    {
        if($gid !== GROUP_ID)
            return;

        if($object['out'] == 1)
            return;
        elseif($object['peer_id'] === GAME_CHAT) {
            $this->handleGameMessage($object, $gid);
            return;
        } elseif($object['peer_id'] < 2000000000) {
            $this->handlePM($object);
            return;
        } else
            return;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
     * @param array $message
     * @throws \Exception
     */
    public function handlePM(array $message)
    {
        $from = $message['from_id'];
        $text = $message['text'];
        $cmd = explode(' ', $text);
        $game = Game::getGameForPlayer($from);

        switch(mb_strtolower($cmd[0]))
        {
            case '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å':
                if($game->active != true || $game->day != false || $game->roles[$from] !== 'cop' || isset($game->checked[$from]))
                    return;

                if(isset($message['fwd_messages']) && isset($message['fwd_messages'][0])) {
                    $fwd = $message['fwd_messages'][0];
                    $uuid = $fwd['from_id'];

                    if(!isset($game->roles[$uuid])) {
                        $this->answer($message, '–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –≤–∞–º–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç');
                        return;
                    }

                    if(random_int(0, 5) == 2) {
                        $this->answer($message, 'üòî –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å');
                        $this->broadcast($game->peer, 'üöî –û–¥–∏–Ω –∏–∑ –≥—Ä–∞–∂–¥–∞–Ω –ª–æ–≤–∫–æ –∏–∑–±–µ–∂–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç –ø–æ–ª–∏—Ü–∏–∏');
                    } else {
                        $uinfo = static::getUserInfo($uuid);
                        $this->answer($message, 'üî¶ ' . $uinfo['first_name'] . ' - ' . Strings::get($game->roles[$uuid]));
                        $this->broadcast($uuid, 'üöî –ü–æ–ª–∏—Ü–∏—è –∑–∞–µ—Ö–∞–ª–∞ –∫ –≤–∞–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π!');
                        $this->broadcast($game->peer, 'üöî –ü–æ–ª–∏—Ü–∏—è –Ω–∞–≤–µ–¥–∞–ª–∞—Å—å –∫ –æ–¥–Ω–æ–º—É –∏–∑ –≥—Ä–∞–∂–¥–∞–Ω');
                        $game->checked[$from] = true;
                    }
                } else {
                    $this->answer($message, '–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–≥–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (–∏ —Ç–æ–∂–µ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É `–ø—Ä–æ–≤–µ—Ä–∏—Ç—å`)');
                }
                return;

            case '—Ä–µ—Å—Ç–∞—Ä—Ç':
                if($from != ADMIN_ID)
                    return;

                $game->save();
                $this->answer($message, 'üíæ –ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é—Å—å...');
                static::restart();
                return;

            case '–ª–µ—á–∏—Ç—å':
                if($game->active != true || $game->day != false || $game->roles[$from] !== 'doc' || isset($game->heals[$from]))
                    return;

                if(isset($message['fwd_messages']) && isset($message['fwd_messages'][0])) {
                    $fwd = $message['fwd_messages'][0];
                    $uuid = $fwd['from_id'];

                    if($from === $uuid) {
                        $this->answer($message, '–°–∞–º–æ–ª–µ—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–¥–Ω–æ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è (–°)');
                        return;
                    }

                    if(!isset($game->roles[$uuid])) {
                        $this->answer($message, '–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –≤–∞–º–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç');
                        return;
                    }

                    $uinfo = static::getUserInfo($uuid);
                    $this->answer($message, 'üöë ' . $uinfo['first_name'] . ' –±—É–¥–µ—Ç –≤—ã–ª–µ—á–µ–Ω');
                    $this->broadcast($uuid, 'üöë –î–æ–∫—Ç–æ—Ä –ø–æ—Å–µ—Ç–∏–ª –≤–∞—Å. –ù–∏—á–µ–≥–æ –Ω–µ –±–æ–ª–∏—Ç? üòè');
                    $this->broadcast($game->peer, 'üöë –î–æ–∫—Ç–æ—Ä –≤—ã–µ—Ö–∞–ª –Ω–∞ –≤—ã–∑–æ–≤');
                    $game->heals[$from] = $uuid;
                } else {
                    $this->answer($message, '–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–≥–æ —Ö–æ—á–µ—à—å –≤—ã–ª–µ—á–∏—Ç—å (–∏ —Ç–æ–∂–µ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É `–ª–µ—á–∏—Ç—å`)');
                }
                return;

            case '—É–±–∏—Ç—å':
                if($game->active != true || $game->day != false || $game->roles[$from] !== 'maf')
                    return;

                if(isset($message['fwd_messages']) && isset($message['fwd_messages'][0])) {
                    $fwd = $message['fwd_messages'][0];
                    $kill_id = $fwd['from_id'];

                    if(!isset($game->roles[$kill_id])) {
                        $this->answer($message, '–≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –≤–∞–º–∏ –Ω–µ –∏–≥—Ä–∞–µ—Ç');
                        return;
                    }

                    if(random_int(0, 5) == 2) {
                        $this->answer($message, 'üòî –£–±–∏–π—Å—Ç–≤–æ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å');
                        $this->broadcast($game->peer, 'üöÄ –û–¥–∏–Ω –∏–∑ –≥—Ä–∞–∂–¥–∞–Ω —á—É–¥–æ–º –∏–∑–±–µ–∂–∞–ª —Å–º–µ—Ä—Ç–∏ –æ—Ç —Ä—É–∫–∏ –º–∞—Ñ–∏–æ–∑–∏!');
                    } else {
                        $kill_info = static::getUserInfo($kill_id);
                        $this->answer($message, $kill_info['first_name'] . ' —Ç—Ä—É–ø üòå');
                        $this->broadcast($game->peer, 'üî´ –ú–∞—Ñ–∏–æ–∑–∏ –≤—ã–±—Ä–∞–ª –∂–µ—Ä—Ç–≤—É. –ö—Ç–æ-—Ç–æ –Ω–µ –¥–æ–∂–∏–≤—ë—Ç –¥–æ —É—Ç—Ä–∞...');
                        $game->killed[$from] = $kill_id;
                    }
                } else {
                    $this->answer($message, '–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–≥–æ —Ö–æ—á–µ—à—å —É–±–∏—Ç—å (–∏ —Ç–æ–∂–µ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É `—É–±–∏—Ç—å`)');
                }
                return;

            case '—Ä–æ–ª—å':
                if($game->active != true || !isset($game->roles[$from]))
                    return;

                $this->answer($message, 'ü§´ –¢—ã -- ' . Strings::get($game->roles[$from]));
                $this->broadcast($game->peer, '‚õ™Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–≤–µ–¥–æ–≤–∞–ª—Å—è –≤ —Ü–µ—Ä–∫–≤–∏');
                return;

            case '—Å—É–∏—Ü–∏–¥':
                if($game->active != true || !isset($game->roles[$from]))
                    return;

                $role = Strings::get($game->roles[$from]);
                $label = self::getUserLabel($from, true);
                unset($game->roles[$from]);

                $this->broadcast($game->peer, "üõÄ {$label} ({$role}) –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∞ —Å–µ–±—è —Ä—É–∫–∏...");
                return;

            default:
                if(mb_strtolower($cmd[0]) === '–Ω–∞—á–∞—Ç—å') {
                    $this->answer($message, "‚úåüèª –ü—Ä–∏–≤–µ—Ç!\n\n–ü–æ–∫–∞ –∏–≥—Ä–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–∫—Ä—ã—Ç–æ–º —Ä–µ–∂–∏–º–µ. –û–∂–∏–¥–∞–π!");
                    return;
                }

                if(!isset($game->roles[$from]))
                    return;

                if($game->day == false && $game->roles[$from] === 'maf') {
                    $this->answer($message, '–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–≥–æ —Ö–æ—á–µ—à—å —É–±–∏—Ç—å, –∏ –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É `—É–±–∏—Ç—å` üòè');
                    return;
                }

                $instructions = "üß∏ –ü—Ä–∏–≤–µ—Ç! –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n";
                $instructions .= "üî™ `—É–±–∏—Ç—å` - —É–±–∏–≤–∞–µ—Ç –∏–≥—Ä–æ–∫–∞. –¢–æ–ª—å–∫–æ –¥–ª—è –º–∞—Ñ–∏–∏ –∏ —Ç–æ–ª—å–∫–æ –Ω–æ—á—å—é\n";
                $instructions .= "üõ° `–ø—Ä–æ–≤–µ—Ä–∏—Ç—å` - —É–∑–Ω–∞—Ç—å —Ä–æ–ª—å. –¢–æ–ª—å–∫–æ –¥–ª—è –æ—Ñ–∏—Ü–µ—Ä–∞ –∏ —Ç–æ–ª—å–∫–æ –Ω–æ—á—å—é\n";
                $instructions .= "üíâ `—Å—É–∏—Ü–∏–¥` - –≤—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã\n";
                $instructions .= "‚ùì `—Ä–æ–ª—å` - –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –∫—Ç–æ —Ç—ã —Ç–∞–∫–æ–π\n";
                $instructions .= "üíä `–ª–µ—á–∏—Ç—å` - –≤—ã–ª–µ—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞. –¢–æ–ª—å–∫–æ –¥–ª—è –¥–æ–∫—Ç–æ—Ä–∞ –∏ —Ç–æ–ª—å–∫–æ –Ω–æ—á—å—é";
                $this->answer($message, $instructions);
            return;
        }
    }

    /**
     * –î–µ–ª–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å nohup
     */
    public static function restart(): void
    {
        exec("nohup ".EXEC_MAIN_FILE." > /dev/null 2>&1 &");
        exit;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ ping-—Å–∏–≥–Ω–∞–ª–∞. –°–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–æ–¥ –∑–¥–µ—Å—å
     * @param array $message
     * @param int $gid
     * @throws \Exception
     */
    public function handleGameMessage(array $message, int $gid)
    {
        // –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∏–≥–Ω–∞–ª ping - –¥–µ–ª–∞–µ–º –≤–∏–¥, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∏–∫–æ–≥–æ
        if(count($message) <= 1)
            $message = ['peer_id' => GAME_CHAT, 'from_id' => -1, 'text' => ''];

        $is_ping = isset($message['ping']);
        $skip_warn = false;
        $peer = $message['peer_id'];
        $from = (int)$message['from_id'];
        $text = $message['text'];
        $game = Game::i($gid);
        //$cmd = explode(' ', $text);

        if($game->peer == -1)
            $game->peer = $peer;

        $game->save(); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑—É –∏–ª–∏ —Ñ–∞–π–ª

        // –µ—Å–ª–∏ –∞–¥–º–∏–Ω —Ö–æ—á–µ—Ç —Å–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Å—É—Ç–æ–∫
        if($text === '–¥–µ–Ω—å' && $from == ADMIN_ID) {
            $game->change_time = 0;
        }

        // –∞–¥–º–∏–Ω —Ö–æ—á–µ—Ç –ø—Ä–µ—Ä–≤–∞—Ç—å –∏–≥—Ä—É
        if($text === '–∞–±–æ—Ä—Ç' && $from == ADMIN_ID) {
            $game->active = false;
            $game->init = false;
            $game->roles = [];
            $this->broadcast($game->peer, '–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞, –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã üßπ');
            return;
        }

        // –µ—Å–ª–∏ –∏–≥—Ä–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–Ω–∞
        if($game->active == true)
        {
            // –Ω–∞–¥–æ –º–µ–Ω—è—Ç—å –≤—Ä–µ–º—è —Å—É—Ç–æ–∫?
            if($game->change_time < time()) {
                $game->first_day = false;
                $new_day = !$game->day;
                $game->day = $new_day;

                if($new_day == true) {
                    $send_text = "‚è∞ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n\n";

                    if(!count($game->killed)) {
                        $send_text .= "–•–æ—Ä–æ—à–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ -- –Ω–æ—á—å—é –≤—Å–µ –æ—Å—Ç–∞–ª–∏—Å—å –∂–∏–≤—ã! –û–¥–Ω–∞–∫–æ –Ω–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è!\n";
                        $send_text .= "–ü–µ—Ä–µ–¥ –Ω–∞–º–∏ –≤–∞–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ -- –≤—ã—è—Å–Ω–∏—Ç—å, –∫—Ç–æ –∂–µ –∑–¥–µ—Å—å –º–∞—Ñ–∏–æ–∑–∏.\n";
                    } else {
                        $votes = array_values((array)$game->killed);
                        $values = array_count_values($votes);
                        arsort($values);
                        $killed = array_keys($values)[0];
                        $label = static::getUserLabel($killed, true);
                        $survive = false;

                        foreach($game->heals as $doctor => $patient) {
                            if ($patient == $killed)
                                $survive = true;
                        }

                        if($survive == true) {
                            $send_text .= "üë®‚Äç‚öïÔ∏è –°—Ç–∞—Ä–∞–Ω–∏—è–º–∏ –¥–æ–∫—Ç–æ—Ä–∞ —á—É–¥–æ–º –≤—ã–∂–∏–ª {$label}, –∫–æ—Ç–æ—Ä–æ–≥–æ —á—É—Ç—å –Ω–µ —É–±–∏–ª–∞ –º–∞—Ñ–∏—è!\n";
                            $send_text .= "–ù—É–∂–Ω–æ –ø–æ–±—ã—Å—Ç—Ä–µ–µ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ –∂–µ –∑–¥–µ—Å—å –º–∞—Ñ–∏–æ–∑–∏.\n";
                        } else {
                            $role = Strings::get($game->roles[$killed]);
                            $send_text .= "‚ö∞Ô∏è –≠—Ç–æ–π –Ω–æ—á—å—é –∑–≤–µ—Ä—Å–∫–∏ —É–±–∏–ª–∏ {$label} ({$role})\n";
                            unset($game->roles[$killed]);
                            $send_text .= "–¢–µ–ø–µ—Ä—å –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –≤—ã—è—Å–Ω–∏—Ç—å, –∫—Ç–æ –∂–µ –∑–¥–µ—Å—å –º–∞—Ñ–∏–æ–∑–∏.\n";
                        }
                    }

                    $game->killed = [];
                    $game->checked = [];
                    $game->heals = [];
                    $send_text .= "–û–±—â–∞–π—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –≤—ã—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –¥–æ–≥–∞–¥–∫–∏\n\n";
                    $send_text .= "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å, –ø–µ—Ä–µ—à–ª–∏—Ç–µ/–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ ";
                    $send_text .= '–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `–≥–æ–ª–æ—Å`. –¢–æ–ª—å–∫–æ –Ω–µ —Å–≥–ª–∞–∑—å—Ç–µ!';
                    $game->change_time = time() + 120;
                } else {
                    if(count($game->votes)) {
                        $votes = array_values((array)$game->votes);
                        $values = array_count_values($votes);
                        arsort($values);

                        if(isset(array_keys($values)[0]) && array_values($values)[0] > 1) {
                            $popular = array_keys($values)[0];

                            if(isset($game->roles[$popular])) {
                                $label = static::getUserLabel($popular, true);
                                $role = $game->roles[$popular];
                                $role_text = Strings::get($role);
                                $txt = "‚öñÔ∏è –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Å–∞–º–æ—Å—É–¥–∞ –∫–∞–∑–Ω—ë–Ω {$label} ({$role_text}). ";

                                if ($role === 'maf')
                                    $txt .= '–ï—â—ë –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –±–ª–∏–∂–µ –∫ —á–∏—Å—Ç–æ–º—É –≥–æ—Ä–æ–¥—É üõ°';
                                else
                                    $txt .= '–í —ç—Ç–æ—Ç —Ä–∞–∑ –º—ã –æ—à–∏–±–ª–∏—Å—å. –°–ª–µ–¥—É–µ—Ç –±—ã—Ç—å –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ.';

                                $this->answer($message, $txt);
                                unset($game->roles[$popular]);
                            }
                        }
                    }

                    $game->votes = [];
                    $send_text = "üí§ –ù–∞—Å—Ç—É–ø–∏–ª–∞ –Ω–æ—á—å, –∂–∏—Ç–µ–ª–∏ –∑–∞—Å—ã–ø–∞—é—Ç...\n";
                    $send_text .= "–¢–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –∫–æ–≤–∞—Ä–Ω–∞—è –º–∞—Ñ–∏—è –≤—ã—à–ª–∞ –Ω–∞ –æ—Ö–æ—Ç—É...\n";
                    $send_text .= "–ú–∞—Ñ–∏–æ–∑–∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π '—Å–≤—è—Ç–æ–π –¥–æ–ª–≥' –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å–æ –º–Ω–æ–π";
                    $skip_warn = true;
                    $game->change_time = time() + 85;
                }

                $this->answer($message, $send_text);
            }

            // –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–∑–≤—É—á–∞–ª–æ –Ω–æ—á—å—é
            if(!$is_ping && !$skip_warn && isset($game->roles[$from]) && !isset($new_day) && $game->day == false) {
                $label = static::getUserLabel($from);
                $this->answer($message, "üò† {$label}, –Ω–µ–ª—å–∑—è —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –Ω–æ—á—å—é! –ë–æ–ª—å—à–µ –Ω–µ —à–∞–ª–∏, –∞ —Ç–æ –∏—Å–∫–ª—é—á–∏–º –∏–∑ –∏–≥—Ä—ã");
                $game->warn($from);
            }

            // –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤—Å—ë, —á—Ç–æ –Ω–∏–∂–µ —ç—Ç–æ–≥–æ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            if($game->active == true && $game->first_day == true)
                return;

            if(!$is_ping && isset($game->warns[$from]) && $game->warns[$from] >= 3) {
                $label = static::getUserLabel($from, true);
                $this->answer($message, "üò° –í—Å—ë, —à–ª—è–ø–∞, –¥–æ–ø—Ä—ã–≥–∞–ª—Å—è!\n{$label} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —ç—Ç–æ–π –∏–≥—Ä—ã. –ü—Ä–∏—á–∏–Ω–∞: 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.");
                unset($game->roles[$from]);
                unset($game->warns[$from]);
            }

            $count = $game->countRoles();

            if(!isset($count['maf']) || $count['maf'] <= 0 || ($from == ADMIN_ID && $text === '–ø–æ–±–µ–¥–∞ civ')) {
                $mafs = [];
                $txt = 'üßÆ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—Å–µ –º–∞—Ñ–∏–æ–∑—ã –ø–æ–±–µ–∂–¥–µ–Ω—ã! ';
                $txt .= "–≠—Ç–æ –±—ã–ª–∞ –Ω–µ–ª—ë–≥–∫–∞—è –ø–æ–±–µ–¥–∞, –Ω–æ –¥–∞, –≥–æ—Ä–æ–¥ –Ω–∞–∫–æ–Ω–µ—Ü —á–∏—Å—Ç!\n";
                $txt .= '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º: ';

                foreach($game->roles as $uuid => $role) {
                    if ($role !== 'maf') {
                        $mafs[] = $uuid;
                        $txt .= static::getUserLabel($uuid, true) . ', ';
                    }
                }

                Rating::applyWinners($mafs);
                $txt .= "–Ω—É –∏ —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω–æ –º–∞—à–µ–º —Ä—É—á–∫–æ–π —Ç–µ–º, –∫—Ç–æ –ø—Ä–æ–∏–≥—Ä–∞–ª. –í—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –±–∏–ª–∏—Å—å –¥–æ—Å—Ç–æ–π–Ω–æ!";
                $this->broadcast($game->peer, $txt);
                $game->active = $game->init = false;
                $game->members = [];
                $game->roles = [];
            } elseif($count['maf'] >= count($game->roles)-$count['maf'] || ($from == ADMIN_ID && $text === '–ø–æ–±–µ–¥–∞ maf')) {
                $mafs = [];
                $txt = '‚öîÔ∏è –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –≥–æ—Ä–æ–¥–æ–º –∑–∞–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Ñ–∏—è... ';
                $txt .= "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–ª—è –≤—ã–∂–∏–≤—à–∏—Ö –≥—Ä–∞–∂–¥–∞–Ω, –∏—Ö –∂–¥—ë—Ç –æ-–æ-–æ—á–µ–Ω—å –Ω–µ–ª—ë–≥–∫–∞—è –∂–∏–∑–Ω—å\n";
                $txt .= '–ù–æ–≤—ã–µ —Ö–æ–∑—è–µ–≤–∞ –≥–æ—Ä–æ–¥–∞: ';

                foreach($game->roles as $uuid => $role) {
                    if($role === 'maf') {
                        $mafs[] = $uuid;
                        $txt .= static::getUserLabel($uuid, true) . ', ';
                    }
                }

                Rating::applyWinners($mafs);
                $txt .= "–Ω—É –∏ –≤—Å—ë. –£–¥–∞—á–Ω–æ–≥–æ –ø–æ—Ä–∞–±–æ—â–µ–Ω–∏—è! üî´";
                $this->broadcast($game->peer, $txt);
                $game->active = $game->init = false;
                $game->members = [];
                $game->roles = [];
            }
        }

        if($text === '—Ä–µ–π—Ç–∏–Ω–≥')
        {
            $rating = Rating::getScoreTable();
            $txt = "‚≠êÔ∏è –¢–û–ü –ò–ì–†–û–ö–û–í\n";
            $idx = 0;

            foreach($rating as $el) {
                if(!isset($el['wins']) || $el['wins'] < 1)
                    continue;

                $idx++;
                $label = self::getUserLabel($el['uid']);
                $place = Rating::getPlaceBadge($idx);
                $txt .= "{$place} {$label} (–ø–æ–±–µ–¥: {$el['wins']}) \n";
            }

            if($idx == 0)
                $txt .= "–ü–æ–∫–∞ –ø—É—Å—Ç–æ üòî";

            $this->answer($message, $txt);
            return;
        }

        // –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if(!$is_ping && ($game->active != true || isset($game->roles[$from]))) {
            switch (mb_strtolower($text)) {
                case '–ø–∏–Ω–≥':
                    $this->answer($message, "–ü–û–ù–ì");
                    return;

                case '–Ω–æ–≤–∞—è –∏–≥—Ä–∞':
                    if ($game->active == true || $game->init == true) {
                        $this->answer($message, '–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ üòÆ');
                        return;
                    }

                    $game->active = false;
                    $game->init = true;
                    $game->members = [];
                    $initiator = static::getUserInfo($from);

                    $this->answer($message,
                        "üßê {$initiator['first_name']} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—É—é –∏–≥—Ä—É \n" .
                        "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ `–∏–≥—Ä–∞—é` "
                    );
                    return;

                case '–∂–∏–≤—ã–µ':
                    if ($game->active != true)
                        return;

                    $str = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏: \n";

                    foreach($game->roles as $mem => $role)
                        $str .= "üëâüèª ".self::getUserLabel($mem)."\n";

                    $this->answer($message, $str);
                    return;

                case '–≥–æ–ª–æ—Å':
                    if($game->active != true || $game->day != true || $game->first_day == true || !isset($game->roles[$from]))
                        return;

                    if(isset($message['reply_message']))
                        $msg = $message['reply_message'];
                    elseif(isset($message['fwd_messages'][0]))
                        $msg = $message['fwd_messages'][0];
                    else {
                        $this->answer($message, 'ü§î –ü–µ—Ä–µ—à–ª–∏—Ç–µ/–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ');
                        return;
                    }

                    $suspect = $msg['from_id'];

                    if(!isset($game->roles[$suspect]))
                        return;

                    if($suspect < 0)
                        return;

                    $game->votes[$from] = $suspect;
                    $label = static::getUserLabel($from);
                    $sus_label = static::getUserLabel($suspect);
                    $this->answer($message, "üìù {$label} –≥–æ–ª–æ—Å—É–µ—Ç –ø—Ä–æ—Ç–∏–≤ {$sus_label}");
                    return;

                case 'test':
                    $this->answer($message, var_export($message, true));
                    return;

                case '–≤—ã–π—Ç–∏':
                    if ($game->active == true)
                        return;

                    if ($game->init != true) {
                        $this->answer($message, 'üòõ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞');
                        return;
                    }

                    if (!in_array((int)$from, $game->members)) {
                        $this->answer($message, 'ü§î –¢—ã –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª—Å—è');
                        return;
                    }

                    unset($game->members[array_search($from, $game->members)]);
                    $this->answer($message, 'ü§îüëåüèª –ò—Å–∫–ª—é—á—ë–Ω –∏–∑ –ø–∞—Ä—Ç–∏–∏');
                    return;

                case '–∏–≥—Ä–∞—é':
                    if ($game->active == true)
                        return;

                    if ($game->init != true) {
                        $this->answer($message, 'üòõ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞');
                        return;
                    }

                    if (in_array((int)$from, $game->members)) {
                        $this->answer($message, 'ü§î –¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω');
                        return;
                    }

                    $new_member = static::getUserInfo($from);
                    $game->members[] = (int)$from;
                    $this->answer($message, 'üîå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, —Ç–æ–≤–∞—Ä–∏—â ' . $new_member['last_name']);
                    return;

                case '–Ω–∞–±–æ—Ä':
                    if ($game->init == false || $game->active == true)
                        return;

                    $str = "üìù –ù–∞ –∏–≥—Ä—É —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å: \n";

                    foreach($game->members as $mem)
                        $str .= "üëâüèª ".self::getUserLabel($mem)."\n";

                    $this->answer($message, $str);
                    return;

                case '–ø–æ–µ—Ö–∞–ª–∏':
                    if ($game->init == false || $game->active == true)
                        return;

                    $game->members = (array)$game->members;

                    if (count($game->members) < 5) {
                        $this->answer($message, 'üîåüîç –ú–∞–ª–æ–≤–∞—Ç–æ –∏–≥—Ä–æ–∫–æ–≤. –ù—É–∂–Ω–æ –Ω–∞–±—Ä–∞—Ç—å —Ö–æ—Ç—è 5');
                        return;
                    }

                    // –¥–∞–ª—å—à–µ —Å–ª–µ–¥—É–µ—Ç –ø–ª–æ—Ö–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π :(

                    shuffle($game->members);
                    $mafs = [];
                    $roles = [];
                    $roles_available = ['maf', 'cop'];

                    if(count($game->members) > 7)
                        $roles_available[] = 'maf';
                    if(count($game->members) > 8)
                        $roles_available[] = 'cop';
                    if(count($game->members) > 9)
                        $roles_available[] = 'doc';
                    if(count($game->members) > 10)
                        $roles_available[] = 'maf';

                    foreach (($mem = $game->members) as $uuid) {
                        if(isset($roles[$uuid]))
                            continue;

                        $role = array_pop($roles_available);

                        if ($role != null)
                            $roles[$uuid] = $role;
                        else
                            $roles[$uuid] = 'civ';

                        if($roles[$uuid] === 'maf')
                            $mafs[$uuid] = static::getUserLabel($uuid);
                    }

                    $mafs_string = implode(', ', array_values($mafs));

                    foreach($mafs as $uuid => $label) {
                        try {
                            $this->broadcast($uuid, "üìù {$label}, —Ç—ã –º–∞—Ñ–∏–æ–∑–∏! –¢–≤–æ–∏ –∫–æ–ª–ª–µ–≥–∏: {$mafs_string}. –õ—É—á—à–µ –∏—Ö –Ω–µ —É–±–∏–≤–∞—Ç—å. –ù–∞–≤–µ—Ä–Ω–æ–µ...");
                        } catch (\Exception $e) {}
                    }

                    foreach($roles as $uuid => $role) {
                        if($role === 'maf')
                            continue;

                        try {
                            $label = self::getUserLabel($uuid);
                            $this->broadcast($uuid, "üìù {$label}, —Ç–≤–æ—è —Ä–æ–ª—å -- " . Strings::get($role));
                        } catch (\Exception $e) {}
                    }

                    shuffle($game->members);
                    $game->roles = $roles;
                    $game->init = false;
                    $game->active = true;
                    $game->warns = $game->votes = $game->killed = [];
                    $game->day = true;
                    $game->first_day = true;
                    $message_text = "‚úÖ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!\n\n";
                    $message_text .= '–ü–æ–ª–æ–∂–µ–Ω–∏–µ –¥–µ–ª: ';

                    foreach ($game->countRoles() as $role => $cnt) {
                        $message_text .= $cnt . ' ' . Strings::get($role) . ', ';
                    }

                    $message_text .= '–¥–ª—è –ø–æ–±–µ–¥—ã –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö –Ω—É–∂–Ω–æ –∫–∞–∑–Ω–∏—Ç—å –≤—Å–µ—Ö –º–∞—Ñ–∏–æ–∑–∏. ';
                    $message_text .= '–°–µ–π—á–∞—Å –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å, –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –µ—â—ë –Ω–µ–ª—å–∑—è. –ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, –æ–±—â–∞–π—Ç–µ—Å—å, –æ–∂–∏–¥–∞–µ–º –Ω–æ—á—å üö¨';
                    $message_text .= "\n\n(—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ—á–µ–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)";
                    $this->answer($message, $message_text);
                    $game->change_time = time() + 40;
                    return;
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ $peer_id
     * @param int $peer_id
     * @param string $text
     * @throws \Exception
     */
    public function broadcast(int $peer_id, string $text): void
    {
        self::getVK()->messages()->send(VK_TOKEN, [
            'peer_id' => $peer_id,
            'random_id' => time() . random_int(0, 255),
            'message' => $text
        ]);
    }

    /**
     * –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param array $to_message
     * @param string $text
     * @return mixed
     * @throws \Exception
     */
    public function answer(array $to_message, string $text)
    {
        $obj = [
            'peer_id' => $to_message['peer_id'],
            'random_id' => time() . random_int(0, 255),
            'message' => $text
        ];

        if(isset($to_message['id']))
            $obj['reply_to'] = $to_message['id'];

        return self::getVK()->messages()->send(VK_TOKEN, $obj);
    }

    /**
     * –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ—É –æ —é–∑–µ—Ä–µ
     * @param int $uid
     * @return array
     * @throws \VK\Exceptions\VKApiException
     * @throws \VK\Exceptions\VKClientException
     */
    public static function getUserInfo(int $uid): array
    {
        $info = self::getVK()->users()->get(VK_TOKEN, ['user_id' => $uid]);

        if(isset($info[0]))
            return $info[0];

        return ['first_name' => 'DELETED', 'last_name' => 'DELETED'];
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≥–æ–¥–Ω—É—é –¥–ª—è —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫—É —Å –∏–º–µ–Ω–µ–º —é–∑–µ—Ä–∞ –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
     * @param int $uid
     * @param bool $push
     * @return string
     * @throws \VK\Exceptions\VKApiException
     * @throws \VK\Exceptions\VKClientException
     */
    public static function getUserLabel(int $uid, bool $push = false): string
    {
        $info = self::getUserInfo($uid);
        $name = $info['first_name'] . ' ' . $info['last_name'];

        if($uid < 0)
            return $info['first_name'];

        if($push == true)
            $label = "*id{$uid} ({$name})";
        else
            $label = $name;

        return $label;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä VK API
     * @return VKApiClient
     */
    public static function getVK(): VKApiClient
    {
        if(is_object(self::$vk_api))
            return self::$vk_api;

        return self::$vk_api = (
            new VKApiClient('5.101', VKLanguage::RUSSIAN)
        );
    }
}